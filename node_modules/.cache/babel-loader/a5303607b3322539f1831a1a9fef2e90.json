{"ast":null,"code":"import _classCallCheck from \"/Users/sinsang-eun/Documents/Github/FIGLE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sinsang-eun/Documents/Github/FIGLE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sinsang-eun/Documents/Github/FIGLE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sinsang-eun/Documents/Github/FIGLE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sinsang-eun/Documents/Github/FIGLE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sinsang-eun/Documents/Github/FIGLE/src/layouts/Admin.jsx\";\nimport React from \"react\";\nimport { Route, Switch } from \"react-router-dom\"; // reactstrap components\n\nimport { Container } from \"reactstrap\"; // core components\n\nimport AdminNavbar from \"components/Navbars/AdminNavbar.jsx\";\nimport AdminFooter from \"components/Footers/AdminFooter.jsx\";\nimport Sidebar from \"components/Sidebar/Sidebar.jsx\";\nimport routes from \"routes.js\";\n\nvar Admin =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Admin, _React$Component);\n\n  function Admin() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Admin);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Admin)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getRoutes = function (routes) {\n      // routes라는 파라미터 변수 선언\n      return routes.map(function (prop, key) {\n        // map 함수를 통하여 routes로 값이 들어올 때마다 반복하여 반환\n        if (prop.layout === \"/admin\") {\n          // 주소창의 경로가 /admin일 경우\n          return (// 라우팅, 아래와 같은 형식으로 경로 및 컴포넌트 반환\n            React.createElement(Route, {\n              path: prop.layout + prop.path,\n              component: prop.component,\n              key: key,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 28\n              },\n              __self: this\n            })\n          );\n        } else {\n          return null;\n        }\n      });\n    };\n\n    _this.getBrandText = function (path) {\n      // routes.js 파일에서 반환된 값의 길이 만큼 반복\n      for (var i = 0; i < routes.length; i++) {\n        if (_this.props.location.pathname.indexOf(routes[i].layout + routes[i].path) !== -1) {\n          return routes[i].name;\n        }\n      }\n\n      return \"Brand\";\n    };\n\n    return _this;\n  }\n\n  _createClass(Admin, [{\n    key: \"componentDidUpdate\",\n    // Props 또는 State가 변경이 되면 갱신 발생\n    value: function componentDidUpdate(e) {\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      this.refs.mainContent.scrollTop = 0;\n    } //getRoutes 함수 선언\n\n  }, {\n    key: \"render\",\n    // 페이지 렌더링\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(Sidebar, Object.assign({}, this.props, {\n        routes: routes,\n        logo: {\n          innerLink: \"/admin/index\",\n          imgSrc: require(\"assets/img/brand/argon-react.png\"),\n          imgAlt: \"...\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"main-content\",\n        ref: \"mainContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(AdminNavbar, Object.assign({}, this.props, {\n        brandText: this.getBrandText(this.props.location.pathname),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })), React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, this.getRoutes(routes)), React.createElement(Container, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(AdminFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Admin;\n}(React.Component);\n\nexport default Admin;","map":{"version":3,"sources":["/Users/sinsang-eun/Documents/Github/FIGLE/src/layouts/Admin.jsx"],"names":["React","Route","Switch","Container","AdminNavbar","AdminFooter","Sidebar","routes","Admin","getRoutes","map","prop","key","layout","path","component","getBrandText","i","length","props","location","pathname","indexOf","name","e","document","documentElement","scrollTop","scrollingElement","refs","mainContent","innerLink","imgSrc","require","imgAlt","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B,C,CACA;;AACA,SAASC,SAAT,QAA0B,YAA1B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,OAAP,MAAoB,gCAApB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;IAEMC,K;;;;;;;;;;;;;;;;;;UAWJC,S,GAAY,UAAAF,MAAM,EAAI;AAAE;AACtB,aAAOA,MAAM,CAACG,GAAP,CAAW,UAACC,IAAD,EAAOC,GAAP,EAAe;AAAE;AACjC,YAAID,IAAI,CAACE,MAAL,KAAgB,QAApB,EAA8B;AAAE;AAC9B,iBACE;AACA,gCAAC,KAAD;AACE,cAAA,IAAI,EAAEF,IAAI,CAACE,MAAL,GAAcF,IAAI,CAACG,IAD3B;AAEE,cAAA,SAAS,EAAEH,IAAI,CAACI,SAFlB;AAGE,cAAA,GAAG,EAAEH,GAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAQD,SATD,MASO;AACL,iBAAO,IAAP;AACD;AACF,OAbM,CAAP;AAcD,K;;UAGDI,Y,GAAe,UAAAF,IAAI,EAAI;AACrB;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,MAAM,CAACW,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YACE,MAAKE,KAAL,CAAWC,QAAX,CAAoBC,QAApB,CAA6BC,OAA7B,CACEf,MAAM,CAACU,CAAD,CAAN,CAAUJ,MAAV,GAAmBN,MAAM,CAACU,CAAD,CAAN,CAAUH,IAD/B,MAEM,CAAC,CAHT,EAIE;AACA,iBAAOP,MAAM,CAACU,CAAD,CAAN,CAAUM,IAAjB;AACD;AACF;;AACD,aAAO,OAAP;AACD,K;;;;;;;AAvCD;uCACmBC,C,EACnB;AACEC,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,GAAqC,CAArC;AACAF,MAAAA,QAAQ,CAACG,gBAAT,CAA0BD,SAA1B,GAAsC,CAAtC;AACA,WAAKE,IAAL,CAAUC,WAAV,CAAsBH,SAAtB,GAAkC,CAAlC;AACD,K,CAED;;;;AAiCA;6BACS;AACP,aACE,0CACE,oBAAC,OAAD,oBACM,KAAKR,KADX;AAEE,QAAA,MAAM,EAAEZ,MAFV;AAGE,QAAA,IAAI,EAAE;AACJwB,UAAAA,SAAS,EAAE,cADP;AAEJC,UAAAA,MAAM,EAAEC,OAAO,CAAC,kCAAD,CAFX;AAGJC,UAAAA,MAAM,EAAE;AAHJ,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAUE;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,GAAG,EAAC,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD,oBACM,KAAKf,KADX;AAEE,QAAA,SAAS,EAAE,KAAKH,YAAL,CAAkB,KAAKG,KAAL,CAAWC,QAAX,CAAoBC,QAAtC,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAKE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,KAAKZ,SAAL,CAAeF,MAAf,CAAT,CALF,EAME,oBAAC,SAAD;AAAW,QAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CANF,CAVF,CADF;AAuBD;;;;EApEiBP,KAAK,CAACmC,S;;AAuE1B,eAAe3B,KAAf","sourcesContent":["import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n// reactstrap components\nimport { Container } from \"reactstrap\";\n// core components\nimport AdminNavbar from \"components/Navbars/AdminNavbar.jsx\";\nimport AdminFooter from \"components/Footers/AdminFooter.jsx\";\nimport Sidebar from \"components/Sidebar/Sidebar.jsx\";\n\nimport routes from \"routes.js\";\n\nclass Admin extends React.Component {\n\n  // Props 또는 State가 변경이 되면 갱신 발생\n  componentDidUpdate(e) \n  { \n    document.documentElement.scrollTop = 0;\n    document.scrollingElement.scrollTop = 0;\n    this.refs.mainContent.scrollTop = 0;\n  }\n\n  //getRoutes 함수 선언\n  getRoutes = routes => { // routes라는 파라미터 변수 선언\n    return routes.map((prop, key) => { // map 함수를 통하여 routes로 값이 들어올 때마다 반복하여 반환\n      if (prop.layout === \"/admin\") { // 주소창의 경로가 /admin일 경우\n        return (\n          // 라우팅, 아래와 같은 형식으로 경로 및 컴포넌트 반환\n          <Route\n            path={prop.layout + prop.path}\n            component={prop.component}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n\n  //getBrandText 함수 선언\n  getBrandText = path => {\n    // routes.js 파일에서 반환된 값의 길이 만큼 반복\n    for (let i = 0; i < routes.length; i++) {\n      if (\n        this.props.location.pathname.indexOf(\n          routes[i].layout + routes[i].path\n        ) !== -1\n      ) {\n        return routes[i].name;\n      }\n    }\n    return \"Brand\";\n  };\n\n  // 페이지 렌더링\n  render() {\n    return (\n      <>\n        <Sidebar\n          {...this.props}\n          routes={routes}\n          logo={{\n            innerLink: \"/admin/index\",\n            imgSrc: require(\"assets/img/brand/argon-react.png\"),\n            imgAlt: \"...\"\n          }}\n        />\n        <div className=\"main-content\" ref=\"mainContent\">\n          <AdminNavbar\n            {...this.props}\n            brandText={this.getBrandText(this.props.location.pathname)}\n          />\n          <Switch>{this.getRoutes(routes)}</Switch>\n          <Container fluid>\n            <AdminFooter />\n          </Container>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Admin;\n"]},"metadata":{},"sourceType":"module"}